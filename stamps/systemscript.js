        // Firebase Configuration
        const firebaseConfig = {
            apiKey: "AIzaSyAMY49YYOfOq4vmgV6-0B6Nw0YMbeNDKqY",
            authDomain: "cttc19suratthani.firebaseapp.com",
            databaseURL: "https://cttc19suratthani-default-rtdb.asia-southeast1.firebasedatabase.app",
            projectId: "cttc19suratthani",
            storageBucket: "cttc19suratthani.firebasestorage.app",
            messagingSenderId: "400782042259",
            appId: "1:400782042259:web:f2413290877d7d5a8c9966",
            measurementId: "G-60M90WD3KF"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const database = firebase.database();

        // Global variables
        let currentUser = null;
        let isAdmin = false;
        let codeReader = null;

        // DOM Elements
        const loginPage = document.getElementById('loginPage');
        const registerPage = document.getElementById('registerPage');
        const userDashboard = document.getElementById('userDashboard');
        const adminDashboard = document.getElementById('adminDashboard');

        // Show toast notification
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toastMessage');
            
            toast.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg transform transition-transform duration-300 z-50 ${
                type === 'success' ? 'bg-green-500' : 'bg-red-500'
            } text-white`;
            
            toastMessage.textContent = message;
            toast.style.transform = 'translateX(0)';
            
            setTimeout(() => {
                toast.style.transform = 'translateX(100%)';
            }, 3000);
        }

        // Modal functions
        function showModal(modalId) {
            document.getElementById(modalId).classList.add('show');
        }

        function hideModal(modalId) {
            document.getElementById(modalId).classList.remove('show');
        }

        // Confirmation modal
        function showConfirmModal(title, message, onConfirm) {
            document.getElementById('confirmTitle').textContent = title;
            document.getElementById('confirmMessage').textContent = message;
            
            const confirmOk = document.getElementById('confirmOk');
            const confirmCancel = document.getElementById('confirmCancel');
            
            // Remove existing event listeners
            confirmOk.replaceWith(confirmOk.cloneNode(true));
            confirmCancel.replaceWith(confirmCancel.cloneNode(true));
            
            // Add new event listeners
            document.getElementById('confirmOk').addEventListener('click', () => {
                hideModal('confirmModal');
                onConfirm();
            });
            
            document.getElementById('confirmCancel').addEventListener('click', () => {
                hideModal('confirmModal');
            });
            
            showModal('confirmModal');
        }

        // Info modal
        function showInfoModal(title, message) {
            document.getElementById('infoTitle').textContent = title;
            document.getElementById('infoMessage').innerHTML = message;
            
            const infoOk = document.getElementById('infoOk');
            infoOk.replaceWith(infoOk.cloneNode(true));
            
            document.getElementById('infoOk').addEventListener('click', () => {
                hideModal('infoModal');
            });
            
            showModal('infoModal');
        }

        // Alert functions
        function showAlert(type, message, duration = 3000) {
            const alertElement = document.getElementById(`${type}Alert`);
            const messageElement = document.getElementById(`${type}Message`);
            
            messageElement.textContent = message;
            alertElement.classList.add('show');
            
            setTimeout(() => {
                alertElement.classList.remove('show');
            }, duration);
        }

        function showSuccessAlert(message) {
            showAlert('success', message);
        }

        function showErrorAlert(message) {
            showAlert('error', message);
        }

        function showWarningAlert(message) {
            showAlert('warning', message);
        }

        // Show/Hide pages
        function showPage(page) {
            [loginPage, registerPage, userDashboard, adminDashboard].forEach(p => p.classList.add('hidden'));
            page.classList.remove('hidden');
        }

        // Update stamp display with visual elements
        function updateStampDisplay(stamps) {
            const stampsDisplay = document.getElementById('userStampsDisplay');
            const stampStars = document.getElementById('stampStars');
            const progressFill = document.getElementById('progressFill');
            const progressText = document.getElementById('progressText');
            const levelBadge = document.getElementById('levelBadge');
            
            if (!stampsDisplay) return;
            
            // Update stamp counter
            stampsDisplay.textContent = stamps;
            
            // Calculate level and progress
            const level = Math.floor(stamps / 10) + 1;
            const currentLevelStamps = stamps % 10;
            const nextLevelStamps = 10;
            const progressPercent = (currentLevelStamps / nextLevelStamps) * 100;
            
            // Update progress bar
            progressFill.style.width = progressPercent + '%';
            progressText.textContent = `${currentLevelStamps} / ${nextLevelStamps} ‡πÅ‡∏ï‡πâ‡∏°‡∏ñ‡∏∂‡∏á‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏ñ‡∏±‡∏î‡πÑ‡∏õ`;
            
            // Update level badge
            const levelNames = {
                1: 'üåü ‡πÄ‡∏•‡πÄ‡∏ß‡∏• 1 - ‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà',
                2: '‚≠ê ‡πÄ‡∏•‡πÄ‡∏ß‡∏• 2 - ‡∏°‡∏∑‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏•‡πà‡∏ô',
                3: 'üå† ‡πÄ‡∏•‡πÄ‡∏ß‡∏• 3 - ‡∏ô‡∏±‡∏Å‡∏™‡∏∞‡∏™‡∏°',
                4: 'üí´ ‡πÄ‡∏•‡πÄ‡∏ß‡∏• 4 - ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç',
                5: 'üèÜ ‡πÄ‡∏•‡πÄ‡∏ß‡∏• 5 - ‡∏ô‡∏±‡∏Å‡∏™‡∏∞‡∏™‡∏°‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û'
            };
            
            const levelName = levelNames[Math.min(level, 5)] || `üéñÔ∏è ‡πÄ‡∏•‡πÄ‡∏ß‡∏• ${level} - ‡∏ï‡∏≥‡∏ô‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡∏™‡∏∞‡∏™‡∏°`;
            levelBadge.textContent = levelName;
            
            // Generate stars based on stamps
            stampStars.innerHTML = '';
            const starCount = Math.min(stamps, 20); // Max 20 stars for display
            
            for (let i = 0; i < starCount; i++) {
                const star = document.createElement('span');
                star.className = 'star';
                star.style.setProperty('--delay', `${i * 0.1}s`);
                
                // Different star types based on count
                if (i < 5) star.textContent = '‚≠ê';
                else if (i < 10) star.textContent = 'üåü';
                else if (i < 15) star.textContent = 'üí´';
                else star.textContent = '‚ú®';
                
                stampStars.appendChild(star);
            }
            
            // Add bonus stars for high levels
            if (level >= 3) {
                for (let i = 0; i < Math.min(level - 2, 5); i++) {
                    const bonusStar = document.createElement('span');
                    bonusStar.className = 'star';
                    bonusStar.style.setProperty('--delay', `${(starCount + i) * 0.1}s`);
                    bonusStar.textContent = 'üèÜ';
                    stampStars.appendChild(bonusStar);
                }
            }
        }

        // Login form handler
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const username = document.getElementById('username').value.trim();
            const password = document.getElementById('password').value;

            if (!username || !password) {
                showWarningAlert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô');
                return;
            }

            // Check admin credentials
            if (username === 'admin' && password === 'Tle019') {
                isAdmin = true;
                currentUser = { username: 'admin', name: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö' };
                showPage(adminDashboard);
                showSuccessAlert('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                return;
            }

            // Check user credentials
            try {
                const userSnapshot = await database.ref(`users/${username}`).once('value');
                const userData = userSnapshot.val();
                
                if (userData && userData.password === password) {
                    isAdmin = false;
                    currentUser = userData;
                    currentUser.username = username;
                    
                    document.getElementById('userName').textContent = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${userData.name}!`;
                    updateStampDisplay(userData.stamps || 0);
                    
                    showPage(userDashboard);
                    showSuccessAlert('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                    
                    showInfoModal('‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö!', 
                        `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${userData.name}<br>
                         ‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${userData.stamps || 0} ‡πÅ‡∏ï‡πâ‡∏°<br>
                         ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∞‡∏™‡∏°‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!`);
                } else {
                    showErrorAlert('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
                }
            } catch (error) {
                showErrorAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
            }
        });

        // Register form handler
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const username = document.getElementById('regUsername').value.trim();
            const name = document.getElementById('regName').value.trim();
            const password = document.getElementById('regPassword').value;

            if (!username || !name || !password) {
                showWarningAlert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
                return;
            }

            if (username.length < 3) {
                showWarningAlert('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
                return;
            }

            if (password.length < 4) {
                showWarningAlert('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
                return;
            }

            try {
                // Check if username already exists
                const userSnapshot = await database.ref(`users/${username}`).once('value');
                if (userSnapshot.exists()) {
                    showErrorAlert('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà');
                    return;
                }

                // Create new user
                await database.ref(`users/${username}`).set({
                    name: name,
                    password: password,
                    stamps: 0,
                    createdAt: Date.now()
                });

                showSuccessAlert('‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                showInfoModal('‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 
                    `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${name}!<br>
                     ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${username}<br>
                     ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß`);
                
                showPage(loginPage);
                document.getElementById('registerForm').reset();
                
                // Auto fill login form
                document.getElementById('username').value = username;
            } catch (error) {
                showErrorAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å');
            }
        });

        // Navigation between login and register
        document.getElementById('showRegister').addEventListener('click', () => showPage(registerPage));
        document.getElementById('showLogin').addEventListener('click', () => showPage(loginPage));

        // Logout handlers
        document.getElementById('logoutBtn').addEventListener('click', logout);
        document.getElementById('adminLogoutBtn').addEventListener('click', logout);

        function logout() {
            showConfirmModal(
                '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö',
                '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
                () => {
                    currentUser = null;
                    isAdmin = false;
                    showPage(loginPage);
                    document.getElementById('loginForm').reset();
                    
                    // Reset forms and hide containers
                    document.getElementById('stampQRContainer').classList.add('hidden');
                    document.getElementById('redeemQRContainer').classList.add('hidden');
                    document.getElementById('redeemInfo').classList.add('hidden');
                    
                    showSuccessAlert('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
                }
            );
        }

        // Generate stamp QR code (Admin)
        document.getElementById('generateStampQR').addEventListener('click', async () => {
            const amount = document.getElementById('stampAmount').value;
            if (!amount || amount < 1) {
                showErrorAlert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
                return;
            }

            try {
                // Generate unique QR ID
                const qrId = 'qr_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
                
                // Save QR code to database
                await database.ref(`qrcodes/${qrId}`).set({
                    type: 'stamp',
                    amount: parseInt(amount),
                    timestamp: Date.now(),
                    used: false,
                    createdBy: 'admin'
                });

                const qrData = JSON.stringify({
                    type: 'stamp',
                    qrId: qrId,
                    amount: parseInt(amount),
                    timestamp: Date.now()
                });

                const qr = new QRious({
                    element: document.getElementById('stampQRCode'),
                    value: qrData,
                    size: 200,
                    background: 'white',
                    foreground: 'black'
                });

                document.getElementById('stampQRContainer').classList.remove('hidden');
                showSuccessAlert('‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                
                showInfoModal('QR Code ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 
                    `QR Code ‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô<br>
                     ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå: ${amount} ‡πÅ‡∏ï‡πâ‡∏°<br>
                     ‡∏£‡∏´‡∏±‡∏™ QR: ${qrId}`);
            } catch (error) {
                showErrorAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code');
            }
        });

        // Generate redeem QR code (User)
        document.getElementById('generateRedeemQR').addEventListener('click', () => {
            const amount = document.getElementById('redeemAmount').value;
            const userStamps = currentUser.stamps || 0;
            
            if (!amount || amount < 1) {
                showErrorAlert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
                return;
            }
            
            if (parseInt(amount) > userStamps) {
                showWarningAlert('‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•');
                return;
            }

            showConfirmModal(
                '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•',
                `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå ${amount} ‡πÅ‡∏ï‡πâ‡∏° ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
                () => {
                    const qrData = JSON.stringify({
                        type: 'redeem',
                        username: currentUser.username,
                        amount: parseInt(amount),
                        timestamp: Date.now()
                    });

                    const qr = new QRious({
                        element: document.getElementById('redeemQRCode'),
                        value: qrData,
                        size: 200,
                        background: 'white',
                        foreground: 'black'
                    });

                    document.getElementById('redeemQRContainer').classList.remove('hidden');
                    showSuccessAlert('‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                    
                    showInfoModal('QR Code ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', 
                        `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏™‡∏î‡∏á QR Code ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö<br>
                         ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏Å: ${amount} ‡πÅ‡∏ï‡πâ‡∏°<br>
                         <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> QR Code ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ`);
                }
            );
        });

        // QR Scanner functions
        let isScanning = false;

        async function startScanner(videoElement, isUserScanner = true) {
            if (isScanning) return;
            
            try {
                if (!codeReader) {
                    codeReader = new ZXing.BrowserQRCodeReader();
                }

                const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });
                videoElement.srcObject = stream;
                videoElement.classList.remove('hidden');
                isScanning = true;
                
                if (isUserScanner) {
                    document.getElementById('userScanPlaceholder').classList.add('hidden');
                } else {
                    document.getElementById('adminScanPlaceholder').classList.add('hidden');
                }

                codeReader.decodeFromVideoDevice(null, videoElement, (result, err) => {
                    if (result && isScanning) {
                        handleQRResult(result.text, isUserScanner);
                        stopScanner(videoElement, isUserScanner);
                    }
                });
            } catch (error) {
                isScanning = false;
                showToast('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ', 'error');
            }
        }

        function stopScanner(videoElement, isUserScanner = true) {
            isScanning = false;
            
            if (videoElement.srcObject) {
                videoElement.srcObject.getTracks().forEach(track => track.stop());
                videoElement.srcObject = null;
            }
            
            videoElement.classList.add('hidden');
            
            if (isUserScanner) {
                document.getElementById('userScanPlaceholder').classList.remove('hidden');
            } else {
                document.getElementById('adminScanPlaceholder').classList.remove('hidden');
            }
        }

        // Handle QR scan results
        async function handleQRResult(qrText, isUserScanner) {
            try {
                const qrData = JSON.parse(qrText);
                
                if (isUserScanner && qrData.type === 'stamp') {
                    // User scanning stamp QR - Check if QR code is still valid
                    if (!qrData.qrId) {
                        showErrorAlert('QR Code ‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
                        return;
                    }
                    
                    const qrSnapshot = await database.ref(`qrcodes/${qrData.qrId}`).once('value');
                    const qrInfo = qrSnapshot.val();
                    
                    if (!qrInfo) {
                        showErrorAlert('QR Code ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
                        return;
                    }
                    
                    if (qrInfo.used) {
                        showWarningAlert('QR Code ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ');
                        return;
                    }
                    
                    // Mark QR code as used and record who used it
                    await database.ref(`qrcodes/${qrData.qrId}`).update({
                        used: true,
                        usedBy: currentUser.username,
                        usedAt: Date.now()
                    });
                    
                    // Add stamps to user
                    const newStamps = (currentUser.stamps || 0) + qrData.amount;
                    await database.ref(`users/${currentUser.username}/stamps`).set(newStamps);
                    
                    // Record transaction
                    await database.ref('transactions').push({
                        username: currentUser.username,
                        amount: qrData.amount,
                        timestamp: Date.now(),
                        type: 'earn',
                        qrId: qrData.qrId
                    });
                    
                    currentUser.stamps = newStamps;
                    updateStampDisplay(newStamps);
                    
                    showSuccessAlert(`‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå ${qrData.amount} ‡πÅ‡∏ï‡πâ‡∏°!`);
                    
                } else if (!isUserScanner && qrData.type === 'redeem') {
                    // Admin scanning redeem QR
                    const currentTime = Date.now();
                    const qrAge = currentTime - qrData.timestamp;
                    const maxAge = 10 * 60 * 1000; // 10 minutes
                    
                    if (qrAge > maxAge) {
                        showErrorAlert('QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ)');
                        return;
                    }
                    
                    const userSnapshot = await database.ref(`users/${qrData.username}`).once('value');
                    const userData = userSnapshot.val();
                    
                    if (!userData) {
                        showErrorAlert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
                        return;
                    }
                    
                    if (userData.stamps < qrData.amount) {
                        showWarningAlert('‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠');
                        return;
                    }
                    
                    document.getElementById('redeemDetails').innerHTML = `
                        <p><strong>‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:</strong> ${userData.name} (${qrData.username})</p>
                        <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏Å:</strong> ${qrData.amount} ‡πÅ‡∏ï‡πâ‡∏°</p>
                        <p><strong>‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</strong> ${userData.stamps} ‡πÅ‡∏ï‡πâ‡∏°</p>
                        <p><strong>‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏Å:</strong> ${userData.stamps - qrData.amount} ‡πÅ‡∏ï‡πâ‡∏°</p>
                    `;
                    document.getElementById('redeemInfo').classList.remove('hidden');
                    
                    // Store redeem data for confirmation
                    window.pendingRedeem = qrData;
                    
                } else {
                    showErrorAlert('QR Code ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
                }
            } catch (error) {
                showErrorAlert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô QR Code ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
            }
        }

        // Scanner button handlers
        document.getElementById('startUserScan').addEventListener('click', () => {
            startScanner(document.getElementById('userVideo'), true);
        });

        document.getElementById('startAdminScan').addEventListener('click', () => {
            startScanner(document.getElementById('adminVideo'), false);
        });

        // Redeem confirmation handlers
        document.getElementById('confirmRedeem').addEventListener('click', async () => {
            if (!window.pendingRedeem) return;
            
            showConfirmModal(
                '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•',
                '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ô‡∏µ‡πâ?',
                async () => {
                    try {
                        const redeemData = window.pendingRedeem;
                        const userRef = database.ref(`users/${redeemData.username}`);
                        const userSnapshot = await userRef.once('value');
                        const userData = userSnapshot.val();
                        
                        if (userData && userData.stamps >= redeemData.amount) {
                            // Update user stamps
                            const newStamps = userData.stamps - redeemData.amount;
                            await userRef.update({ stamps: newStamps });
                            
                            // Record transaction
                            await database.ref('transactions').push({
                                username: redeemData.username,
                                amount: redeemData.amount,
                                timestamp: Date.now(),
                                type: 'redeem',
                                approvedBy: 'admin'
                            });
                            
                            showSuccessAlert('‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                            document.getElementById('redeemInfo').classList.add('hidden');
                            window.pendingRedeem = null;
                            
                            showInfoModal('‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 
                                `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${userData.name}<br>
                                 ‡πÅ‡∏•‡∏Å‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå: ${redeemData.amount} ‡πÅ‡∏ï‡πâ‡∏°<br>
                                 ‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${newStamps} ‡πÅ‡∏ï‡πâ‡∏°`);
                        } else {
                            showErrorAlert('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πÅ‡∏ï‡∏°‡∏õ‡πå‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠');
                        }
                    } catch (error) {
                        showErrorAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•');
                    }
                }
            );
        });

        document.getElementById('cancelRedeem').addEventListener('click', () => {
            showConfirmModal(
                '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•',
                '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
                () => {
                    document.getElementById('redeemInfo').classList.add('hidden');
                    window.pendingRedeem = null;
                    showToast('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß');
                }
            );
        });

        // Initialize app
        showPage(loginPage);
    